package controls{	import flash.display.Graphics;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;	/**	 * Basic Slider	 */	public class Slider extends Sprite	{		private var iLength:Number;		private var iMinValue:Number;		private var iMaxValue:Number;		private var iValue:Number;		private var iFloatingPoint:int;		private var iCaption:String;		private var iTextFormat:TextFormat;		private var iScale:Number;				private var bar:Sprite;		private var button:Sprite;		private var caption:TextField;				private var diffX:Number;		private var multiplyFactor:Number;		private var linecolor:Number=0x666666;		private var lineThickness:Number=1;		private var fillcolor:Number=0xCCCCCC;		private var eScroll:Event;		private var eStartScroll:Event;		private var eStopScroll:Event;				public static var SCROLL:String = "scroll";		public static var START_SCROLL:String = "startScroll";		public static var STOP_SCROLL:String = "stopScroll";				/**		 * Defines the number of decimal points used in the caption		 */		public function get float():Number		{			return iFloatingPoint;		}				public function set float(float:Number):void		{			iFloatingPoint = float >= 0? float : -1;						var strFactor:String="1";			for (var x:int = 0; x < iFloatingPoint; x++)				strFactor += "0";						multiplyFactor = Number(strFactor);		}				/**		 * defines the current value of the slider		 */		public function get value():Number		{			return iValue;		}				public function set value(val:Number):void		{			if (val < iMinValue)				val = iMinValue;						if (val > iMaxValue)				val = iMaxValue;						if (iValue == val)				return;						iValue = val;						button.x = (val - iMinValue)*(iLength - button.width)/iScale;						update();		}				/**		 * returns the percentage value of the slider		 */		public function get percent():Number		{			return 100*(iValue - iMinValue)/iScale;		}				/**		 * Creates a new <code>Slider</code> instance.		 */		public function Slider(x:Number = 0, y:Number = 0, iLength:Number = 100, iMinValue:Number = 0, iMaxValue:Number = 100, iValue = 0, iFloatingPoint:int = -1, iCaption:String = "", iTextFormat:TextFormat = null):void		{			this.x = x;			this.y = y;			this.iLength = iLength;			this.iMinValue = iMinValue;			this.iMaxValue = iMaxValue;			this.iCaption = iCaption;			this.iTextFormat = iTextFormat || new TextFormat("Verdana", 10, 0xFFFFFF);						buildSlider();						eScroll = new Event(SCROLL);			eStartScroll = new Event(START_SCROLL);			eStopScroll = new Event(STOP_SCROLL);						buildTextField();						iScale = iMaxValue - iMinValue;						float = iFloatingPoint;			value = iValue;						button.addEventListener(MouseEvent.MOUSE_DOWN, onStartScroll);		}				private function buildTextField():void		{			if (iCaption == "")				return;						caption = new TextField();			caption.textColor = 0x000000; 			caption.defaultTextFormat = iTextFormat;			caption.text = iCaption;			caption.autoSize = "left";						button.y += caption.textHeight + 15;			bar.y += caption.textHeight + 15;						addChild(caption);		}				private function buildSlider():void		{			//create bar			bar = new Sprite();			bar.name="bar";			var bar_g:Graphics=bar.graphics;			bar_g.lineStyle(lineThickness,linecolor);			bar_g.moveTo(0,0);			bar_g.lineTo(iLength,0);			addChild(bar);						//create button			button=new Sprite();			button.name="button";			var button_g:Graphics=button.graphics;			button_g.beginFill(fillcolor);			button_g.moveTo(0,0);			button_g.lineTo(15,0);			button_g.lineTo(15,10);			button_g.lineTo(0,10);			button_g.lineTo(0,0);			button_g.endFill();			addChild(button);						//set y value of button			button.y = bar.y - button.height / 2;		}				private function update():void		{			var multiplier:Number = iScale/(iLength - button.width);						switch (iFloatingPoint) {				case 0 :					iValue = Math.round(button.x*multiplier) + iMinValue;					break;				case -1 :					iValue = button.x*multiplier + iMinValue;					break;				default :					iValue = Math.round(multiplyFactor*(button.x*multiplier + iMinValue))/multiplyFactor;			}						if(caption != null)				caption.text = iCaption + ": " + iValue;						dispatchEvent(eScroll);		}				private function onStartScroll(event:MouseEvent):void		{			dispatchEvent(eStartScroll);						diffX = button.x - mouseX;			stage.addEventListener(MouseEvent.MOUSE_MOVE, onUpdateScroll);			stage.addEventListener(MouseEvent.MOUSE_UP, onStopScroll);		}				private function onStopScroll(event:MouseEvent):void		{			dispatchEvent(eStopScroll);						stage.removeEventListener(MouseEvent.MOUSE_MOVE, onUpdateScroll);			stage.removeEventListener(MouseEvent.MOUSE_UP, onStopScroll);		}				private function onUpdateScroll(event:MouseEvent):void		{			button.x = Math.max(Math.min(mouseX + diffX, iLength - button.width), 0);			update();		}	}}